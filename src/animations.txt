Animations Used in the Website
1. Framer Motion Animations
The website extensively uses Framer Motion for animations:
Fade-in animations: opacity: 0 → opacity: 1
Slide-up animations: y: 20 → y: 0 or y: 50 → y: 0
Scale animations: scale: 0 → scale: 1
Staggered animations: Sequential delays (0.1s, 0.2s, 0.3s intervals)
2. CSS Transitions
Color transitions: transition-colors duration-200/300
Transform transitions: transition-transform duration-300
Border transitions: transition-all duration-300
Hover effects: Scale, color, and glow effects
3. Key Animation Patterns
Hero Section:
CTA buttons with scale and opacity animations
Delayed entrance animations (1.2s delay)
Gallery Components:
Staggered grid item animations
Hover scale effects (hover:scale-105)
Loading spinners (animate-spin)
Contact Form:
Multi-step form with progress animations
Input field focus transitions
Button hover effects with glow
Navigation:
Underline animations on hover
Mobile menu transitions
4. Performance Optimizations
The codebase shows evidence of animation optimization:
Removed subtitle animations for better LCP performance
Eliminated SplitText staggered delays
Simplified motion components
5. Animation Libraries
Framer Motion: Primary animation library
Tailwind CSS Animate: For utility animations
React Transition Group: For component transitions
The website uses a modern, performance-conscious approach to animations with smooth transitions, staggered entrances, and interactive hover effects while maintaining good performance metrics.


this is what we used


ChatGPT said:
Thought for 21s

Got it — this matches what you’ve built. Here’s a tight Motion Playbook you can drop in so Claude Code (and you) keep everything consistent, fast, and easy to reuse.

1) Unified Framer Motion variants (lib/motion.ts)
// lib/motion.ts
// Centralized, reusable motion variants used across the app.

import { Variants, Transition } from "framer-motion";

export const t: Transition = { duration: 0.5, ease: "easeOut" };

// 1. Fade-in (opacity 0 → 1)
export const fadeIn: Variants = {
  hidden: { opacity: 0 },
  show: { opacity: 1, transition: t },
};

// 2. Slide-up (y: 20/50 → 0) + fade
export const rise = (distance = 20): Variants => ({
  hidden: { opacity: 0, y: distance },
  show: { opacity: 1, y: 0, transition: t },
});

// 3. Scale-in (0 → 1) + fade
export const scaleIn: Variants = {
  hidden: { opacity: 0, scale: 0.92 },
  show: { opacity: 1, scale: 1, transition: t },
};

// 4. Stagger container (0.1s / 0.2s / 0.3s etc.)
export const stagger = (delayChildren = 0.1, staggerChildren = 0.06): Variants => ({
  hidden: {},
  show: {
    transition: {
      delayChildren,
      staggerChildren,
    },
  },
});

// 5. Route/page transition (opacity cross-fade)
export const routeFade: Variants = {
  hidden: { opacity: 0 },
  show: { opacity: 1, transition: { duration: 0.25, ease: "linear" } },
  exit: { opacity: 0, transition: { duration: 0.2, ease: "linear" } },
});

2) Reusable “reveal on scroll” wrapper (components/motion/Reveal.tsx)
// components/motion/Reveal.tsx
"use client";

import { motion } from "framer-motion";
import { rise } from "@/lib/motion";
import { PropsWithChildren } from "react";

type Props = PropsWithChildren<{
  /** rise distance in px (20 or 50) */
  distance?: number;
  /** trigger only once when visible */
  once?: boolean;
}>;

/**
 * Reveal mounts with IntersectionObserver and plays a slide-up + fade.
 * Use this for section content, cards, gallery items, etc.
 */
export default function Reveal({ children, distance = 20, once = true }: Props) {
  return (
    <motion.div
      initial="hidden"
      whileInView="show"
      viewport={{ once, margin: "-10% 0px" }}
      variants={rise(distance)}
    >
      {children}
    </motion.div>
  );
}

3) Route transitions (app/template.tsx)
// app/template.tsx
"use client";

import { usePathname } from "next/navigation";
import { AnimatePresence, motion } from "framer-motion";
import { routeFade } from "@/lib/motion";

export default function Template({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  return (
    <AnimatePresence mode="wait">
      <motion.main
        key={pathname}
        variants={routeFade}
        initial="hidden"
        animate="show"
        exit="exit"
      >
        {children}
      </motion.main>
    </AnimatePresence>
  );
}

4) Tailwind/CSS helpers you’re already using (plus tiny upgrades)
/* globals.css */

/* 4.1 Underline grow (Navigation hover) */
.link-underline {
  background: linear-gradient(currentColor, currentColor) no-repeat 0 100%/0 2px;
  transition: background-size 300ms;
}
.link-underline:hover { background-size: 100% 2px; }

/* 4.2 Subtle glow (for CTA hover) */
.glow:hover { filter: drop-shadow(0 0 8px currentColor); }

/* 4.3 Respect reduced motion */
@media (prefers-reduced-motion: reduce) {
  * { animation-duration: 0.001ms !important; animation-iteration-count: 1 !important; transition-duration: 0.001ms !important; }
}


Usage examples (Tailwind):

Color transitions: transition-colors duration-300

Transform transitions: transition-transform duration-300 will-change-transform

Border/all: transition-all duration-300

Hover scale: hover:scale-105

Spinner: <div className="animate-spin h-5 w-5 border-2 border-current border-t-transparent rounded-full" />

5) Pattern recipes mapped to your list

Hero CTA (scale + opacity)

<motion.a className="btn glow"
  initial={{ opacity: 0, scale: 0.96 }}
  animate={{ opacity: 1, scale: 1, transition: { delay: 1.2, duration: 0.5 } }}
  whileHover={{ scale: 1.02 }}
  whileTap={{ scale: 0.98 }}
/>


Staggered grid / gallery

<motion.ul variants={stagger(0.1, 0.08)} initial="hidden" whileInView="show" viewport={{ once:true }}>
  {items.map((it) => (
    <motion.li key={it.id} variants={rise(20)} className="transition-transform duration-300 hover:scale-105">
      {/* card */}
    </motion.li>
  ))}
</motion.ul>


Contact / multi-step form (progress + focus)

Progress bar: width transition via Tailwind transition-[width] duration-300

Inputs: focus:ring-2 focus:ring-primary/50 transition-shadow duration-200

Next button: whileHover={{ scale:1.02 }} whileTap={{ scale:0.98 }}

Navigation

Underline on hover: add link-underline to <a>

Mobile menu: scale+fade with Framer or data-state="open" transitions if using Radix UI

Loading spinner

Use animate-spin + border trick above (keeps it CSS-only and cheap)

6) Performance guardrails (you already follow most)

Animate only opacity and transform (avoid layout-affecting props).

Keep LCP clean: hero media loads fast; avoid heavy SplitText/large delays for first content.

Prefer Framer variants + stagger over many independent animations (fewer reflows).

Use viewport={{ once:true }} for on-scroll reveals to avoid re-animating during scroll.

Respect reduced motion (see CSS above); optionally gate heavy effects:

const prefersReduced = typeof window !== "undefined" && window.matchMedia("(prefers-reduced-motion: reduce)").matches;


Keep durations ~200–500ms; reserve >700ms for rare hero moments.

Avoid double libraries unless needed. If Framer handles it, you can skip RTG to save bytes.

7) (Optional) If you want to remove React Transition Group

You can replicate enter/exit transitions with Framer’s AnimatePresence (already shown in template.tsx) and component-level initial/animate/exit. This trims one dep and keeps a single mental model for all transitions.

8) Quick “copy-paste” examples (common cases)

8.1 Fade-in on scroll card

<Reveal>
  <div className="rounded-xl border transition-shadow duration-300 hover:shadow-lg">...</div>
</Reveal>


8.2 Staggered section with headline + items

<motion.section variants={stagger()} initial="hidden" whileInView="show" viewport={{ once:true }}>
  <motion.h2 variants={rise(12)} className="text-2xl font-semibold">Projects</motion.h2>
  <motion.p variants={rise(12)} className="text-muted-foreground">Latest builds from MakerCamp</motion.p>
  <motion.div variants={stagger(0.2, 0.08)} className="grid gap-4 sm:grid-cols-2">
    {projects.map(p => <motion.article key={p.id} variants={rise(20)}>{/* card */}</motion.article>)}
  </motion.div>
</motion.section>


8.3 Mobile menu panel

<motion.aside
  initial={{ opacity: 0, y: -8 }}
  animate={{ opacity: 1, y: 0, transition: { duration: 0.25 } }}
  exit={{ opacity: 0, y: -8, transition: { duration: 0.2 } }}
  className="fixed inset-x-0 top-0 z-50 rounded-b-2xl bg-background shadow-lg"
/>


If you want, I can fold this into your repo as a docs/ANIMATION.md and wire up a couple of sample components (HeroCTA, GalleryItem, MobileMenu) using these exact variants so Claude Code can replicate the pattern everywhere.

ChatGPT can make mistakes. Check important info. See